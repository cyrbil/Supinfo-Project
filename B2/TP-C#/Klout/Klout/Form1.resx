<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="cloud_pb.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAVoAAABFCAYAAAALpi6MAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVhZHlxyWU8AAADImlUWHRYTUw6Y29tLmFkb2Jl
        LnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQi
        Pz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENv
        cmUgNS4wLWMwNjAgNjEuMTM0Nzc3LCAyMDEwLzAyLzEyLTE3OjMyOjAwICAgICAgICAiPiA8cmRmOlJE
        RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8
        cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20v
        eGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxu
        czpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1w
        OkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IE1hY2ludG9zaCIgeG1wTU06SW5zdGFuY2VJ
        RD0ieG1wLmlpZDoxODQwMUQ3MDNCMzMxMUUxQjA5RUI4N0M2N0NERTAwMSIgeG1wTU06RG9jdW1lbnRJ
        RD0ieG1wLmRpZDoxODQwMUQ3MTNCMzMxMUUxQjA5RUI4N0M2N0NERTAwMSI+IDx4bXBNTTpEZXJpdmVk
        RnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkUyNUQ2MjZCM0IzMjExRTFCMDlFQjg3QzY3Q0RF
        MDAxIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkUyNUQ2MjZDM0IzMjExRTFCMDlFQjg3QzY3Q0RF
        MDAxIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQg
        ZW5kPSJyIj8+6BkvUgAADfdJREFUeF7tnU+oX8UVx9+yC6GlG7sqXbkT3LiyCwulLkQIplRQWkOw0BSp
        SusfCtYIFRGFUNAWKUSkUFoKCaV000JaKC7sQhEquhADajTJe0mUJEZr7e37/nAe4+299/y9d2Z+v/OD
        C+9x586/e85nzj1zZmbrkzdf666cOB7XjH3w8Uv/6HZ/W3FtVh+8/q9Xu/x64cTfuz/+/g9710sv/vNz
        9986eTLkZE31ZAuQff/hO7tz99wU1wx9cP6B/d2lo4+rFAhKedf+21SXB9R/99zzqrLzOv/oewe7nTNn
        99oP8GjbhGc92uWZx+VLlzoAE+/qyZ892j364wfV7cv7BXk988RTq3w92126/z1lGn2klaUln0M990D7
        9re2urj8++DsweuaBK1FIXMhhhWXg82SrydwrLBFuwDCpRQWA9bRp39phm7p/g/QBmhnGWhaBC2stAcP
        3W2GCMDQB1ppRbcCFqAA9JYC7FA5eDfaQad0/wdoA7QB2s/8Yx6WGmAAYK8LaOE/9Rh8PAGN9zTUx1OD
        SYBW54qzvLdwHSwwuLRm0cLfaBGq9OzYxE5pRddYtHATePTJHHkA/pJJtNL9HxbtAtDZRB9wS6DFpJXH
        Z/Ff//Tn0Umr0oouBW3NkE3g7k84hkW7vNU6NYiGRbvA4NISaD1mcfE5W7OiS0ALS9Fj4JnDku3niWgH
        jhuh9EAXFi0BnVPfubo7c+/XRReesVqxH/zmcMe5zv7kxsXKSvU5/+QBssxWQAsr1AoEQIlS9tKKLgGt
        V6iWtV+5zwNiVPtK93+AlmHd7TxxsDv/7EPsC+nfufkLJIymYAzJ4fwAPwvU8bz0d/rQdWSZLYDWy3Lj
        zISXVnQKROl+Cy6DIQDnMctDbS3d/wFaBmjf2ffF7tzT97FBCyifuf+bJIxKgxbAlP4u/OpeVrtaAK2H
        5caxpqD4pRWdC9raIgy4Vu1QSF1NccwBWgZoAcT3vn+tCLSA7bt3fJUFpSHgcgGotWhP3fql7j+nT3KL
        WaX76JW/sdtTO2gtgp+UH6DmAqwF0HpFXnDh6JmOct+U7n+LvPVlzGNOwbPvx/JST4ad/enNItieO3JI
        7ULgElAL2ovHjnCLWKX79OKFDnDmuilqBq1F6TQz3q1YtLAKl1DAucrAQDE28FneOcc1RA24AVqmRQvA
        wO8q9dduP7KfDaccYlwKakCLCTTpTzrpVitovVZ/TSl1jT5CCgS47+E2QB7YKyJtHDM2SQifKgAGnzAA
        7xHlgHI3AbT9TXryDXum/tYOcLBMuWXk6VBP9V4HiCiQTIytXAgHrhHDlgtCKWhhlcI6lfykZWDAqBW0
        HlbblELXqugc0GoVMT2HvqWiL8bqgeesPnMAodb+97RoOe9yKI32/XLnIYbKVIMWEDn9w+tFsMVEGibU
        uJ/dSMf9SSH44QvHuVmv0v37jZdF9U5trBG0Hj5IbtxmX+hKf7pSymmpHxR4CnJU2em+9WsDVnGAdnxL
        zuZAC5jAJSCxbLd/frsIWFwaSkCL+FfJD5bve9/9mqjetYIWSmz9PMXzkmWfudJbQObhI6RgZ6kfFFjb
        L/16WcPLArRrBlr4a6UhX7CEuVYtF4hc0AKYUpfBzuF97Pr221WbReuxYczUEts5QbYEaC2ftvDLUu3n
        3ofvVmt54bmxeFrLQOLR/5b+5fYdlU7br8VcBwkqCN+SWLVIy1015g1ahGZJfpf/8pwasrX5aD1Wf1FL
        bCkhL63oVP0sIPBwG+T1s3x5jEGxdP9b+pd6d9z7zYIWQMHyXAlsEbXAsWq5UORYtNLVX/DLSkK5htpT
        i0XrsWHM2NaHXAFHutKKTtXVAgKLxTNUL0ucaIB2zVwHOVzgf5XAFnCmYOsFWunqL7gXOEtsqfqXAi0U
        Lb+sM9le/scALf/ctADt53fhogZJ7v2mLdpVfK1iiS61aswLtLBOJT/uEttaQasVprHnvKy1AG2AViub
        XJBS6bTlW3TAFN41BBnEykqsWqwa6+8KloeAceEI3+vYLl/SUC6kpwDKvV/KotUK09Bznr7HAG2AViub
        FEC597XlVwXalb92dyMZCWz7aXMrlwtar3TY98Dql80h3DpoqbXzXOFO6QK0AVot6KSyNpZeW351oNUs
        0c1hWxK00iW2lGXbOmilS2wpZQjQBmi1oKNki3tfW351oAV8EL4lja9NsC0FWk7kAgXWWuJotcKUP6dZ
        YksJe4A2QKuVTUq2uPe15VcJWgBHs6Vif1tFL5cAlY9k60MJbFu1aCVbH3IFPMK7+JBFX0XUQUQdsCaL
        pLG1JS1aj5jZmuJotaN2es7bNxs+WhlkA7T/f8CiZECfSqvVjSotWs1qsZKghcVrXQW2TqD12iClL/Dh
        OuADNyzasGgnLVrN/ge1TIZxDlzcBNdBGvW9/bQB2gCt1qIMi7a3abh0hVhN4V1eK8JK796lFeah5zwj
        DwK0AVqtbAZoM9BKY2hrXLDgGUvb6mRYrgzw11Knq3KVIEAboA3QCo6z8VgVxtnFi4oWSPep0CzpElyv
        1WHrAFoohlcUQoA2QBugNYBWs8/B0pvKSPeh9djvoBRo+5vKWCZWkmJQR1lzrNoAbYA2QGsArfiwRuZJ
        C14WLSxw6ckKKNu6g1cp0Pah53GyAhQEO/9zgDqWJkAboA3QKkErPn4cZ4ftnszAmb33BC3Kk24wY/XX
        1gJa62KBPL7WclzLOoPWO0LD8hUS+9Gu2X60mtVfktNwvUGLDWMAT8nPsmqsJtACtoCB1qJIz2kPZrTC
        3uMoFcoat2z87bnLGeppeU8B2jUCrWY/A0QlcCzZlIYLRGoyLC9Tugk46iDJv4bdu6aA4rEJuNZfW7tF
        aznuZ+r0WQrw/fv4arCAduy4c0v/W86KS+2zHHMv7cOx9Np+LbIyTLNDF/y4XJfBnKBF3tJjbQBbzc5e
        tVm0ED4oseU8qiSoGn+tRdGXsGgt9fPwYSc4WL885vCRawfXvC6WQX4jQavxy3IPZMwtwjks2pS/9KBG
        RC1I96qtEbQQWOtx1gm2Un+tBWRLgNZqSXqcq2YdCKdO453rdF0OBC3v3vNroRmLVuOXlRwxvhRoNUeP
        S/21tYIWiuFx9LgULBZlWwK0Vt9oijmWDkAJVGij9WuD8hVrQWNpG/oDsqItm2oTB/QpjbYOi7oOYJVK
        T0/YfmS/yC+7FGhRzs7hfVyjeS/dxWNH2O2pGbTw41mEPwms5AhyC2jx2QmF8776LhDL522uxMgHLgAo
        KJYx92Ob8T/Kxn18lnu8C5RPAUELmn7bUA78tkPtytvmMaBLZIyCrrb9VL9OlSs6M2y1WczuGV8S0CK9
        1C+7JGhRFsAp/QHQnEm9mkGb/LVawcuf406UWEDrUc+hPPoKZPWPzlVPbr6U5e81kHDr45HOArk+ALX1
        sdRBBFpYphLI9jfx5oCpn4YLQG1UwOo0iN2QL+kSXfhr4Xqg2lQ7aCGElpCmXGg5n8stgNbqp9Uqssdz
        U/7ZBBxLfK5HHTV5cGSLsmSbcB3AxyqFLGeJLQWqJUCLOiDkS7pEF3Cm6t8CaCGAHsrH2Sy8BdB69YcG
        KNZnOFaX18BqrSv3ec7gwYWsxQfP6duxerAsWo1fFqFcFIQ495cCLeqCvQ2kP8pf2wpoMRttnYSB4lCT
        Fq2AtsZ6UmDiDHSe7iKqPl73vVfcaes1O2g5QIw0W4MDSyughQJiwkYrhPlzUwJZI8DG6usxiePRn9w8
        JHHNXhNv3Lpp03lu0dmE6yBAOgxSql9aAi0E0WsiaI4loFplpZ4bA61XVAZVvsd96WICrzhqj7pP5WGx
        Isc+47V1ttSF5TqgYBL3xyHcGmgBF49Z6bHP2JYs2vSZ7eFS0So35znt3hO1W+yUG0ril83Tcvp0KE2A
        Vrnr2BIDRGug9YTL0GbhrYE29Uetn9qA5di+BhSIvAZVLbimntMOHlSbq54MWwJI61pGi6CFMFo2V8kV
        qD+R0SJo0R+AkmVDFG8Ywcrmxi5Pwae2dqGfIDPawSNAW7HVOSfkWwUtBNbr0zI/3LFV0CYFRv09QuG0
        4AVgAXyvM9xqaVeKWKEWW3BASqXR9n24DiqGeMug9TqVIZ85bh20SYkBOliUHv5sjuJj0MME1pyWXnKT
        wKJcql1wyWDg8FyQUDVo33/4zm5Tru0f3NCduuUqlzhfyhq2gBaKpV3XTwkb936y4LT1SM8lawAKZc3L
        +3lJWNRQvwF+6Ce0EZBK9eMANE+DASnvr7SPAPddeafzahfamNqGAQP9hD73tsq57dfKj0VOtj5587Xu
        yonjG3N9eOzXewPKEsC1gJYrOJGOfw5Xyb4CWPINWErWxbtsDKB520pB1LtdXvlteWXUUj6fXtjulgJu
        gLYNCLYkv1HX9mRqI0GbBHUJ4AZo21OKAFm8M28Z2GjQLgHcAG0orbfSRn7tyVSAdjeMaU7gBmjbU4oA
        WbwzbxkI0GagnQO4AdpQWm+ljfzak6kA7QBokyD/98rlVTTGB48dWkUqaKIUArTtKUWALN6ZtwwEaCdA
        OwncfV9mxeEGaENpvZU28mtPpgK0DNCOAffcPTd17377K5PADdC2pxQBsnhn3jIQoBWAVgPcAG0orbfS
        Rn7tyVSAVgFaCXADtO0pRYAs3pm3DARoDaDlADdAG0rrrbSRX3syFaB1AO0UcHfu/kZ36ejju0naE46o
        c7yzkAEfGQjQzgDAflhYgNZHWEPpox9blYEA7Qyg7Vu4l3/7i7BoZ+znVpUv6r05A8f/AGwH4dHNYJSn
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>